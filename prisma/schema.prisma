generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  password  String
  admin     Boolean      @default(false)
  companies Membership[]
}

model Company {
  id          String       @id @default(cuid())
  name        String
  frequencies Json? @default("{\"pentest\": 12, \"accessReview\": 3}")
  frameworks  Framework[]
  pentests    Pentest[]
  memberships Membership[]
  scopes      Scope[]
}

model Membership {
  userId    String
  companyId String
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
}

model Framework {
  id         String  @id @default(cuid())
  name       String  @unique
  managed    Boolean @default(false)
  completion Int?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

enum PentestType {
  WEB_BLACKBOX
  WEB_GREYBOX
  WEB_WHITEBOX
}

enum PentestStatus {
  REQUESTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Pentest {
  id        String        @id @default(cuid())
  company   Company       @relation(fields: [companyId], references: [id])
  companyId String
  type      PentestType   @default(WEB_BLACKBOX)
  status    PentestStatus @default(REQUESTED)
  date      DateTime
  report    String?
  scope     Scope         @relation(fields: [scopeId], references: [id])
  scopeId   String
}

model Scope {
  id        String    @id @default(cuid())
  name      String    @unique
  scope     String?
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  pentests  Pentest[]
}
