import {
  ActionFunctionArgs,
  json,
  redirect,
  type MetaFunction,
} from "@remix-run/node";
import { authenticator } from "@/lib/auth.server";
import { Form, Link, useLoaderData } from "@remix-run/react";
import Shell from "@/components/layout/Shell";
import prisma from "@/lib/prisma";
import { ExternalLink, File, Send, PlusCircle } from "lucide-react";

import { Card, CardContent } from "@/components/ui/card";
import { Button, buttonVariants } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
  SheetClose,
} from "@/components/ui/sheet";
import dayjs from "dayjs";
import { formatPentestType } from "@/lib/enums";

export const meta: MetaFunction = () => {
  return [
    { title: "Seuthes" },
    { name: "description", content: "Welcome to Remix!" },
  ];
};

export async function action({ request }: ActionFunctionArgs) {
  const body = new URLSearchParams(await request.text());
  const companyId = body.get("companyId") || "";
  const date = body.get("date");
  const type = body.get("type") || "WEB_BLACKBOX";
  const scope = body.get("scope") || "";

  // TODO: Verify the user is a member of the company

  // Create the new pentest
  const newPentest = await prisma.pentest.create({
    data: {
      company: {
        connect: {
          id: companyId,
        },
      },
      type,
      status: "REQUESTED",
      date: date ? new Date(date) : new Date(),
      scope: {
        connect: {
          id: scope,
        },
      },
    },
  });

  // Redirect the user to id of the newly created pentest
  return redirect(`/pentests/${newPentest.id}`);
}

function formatPentestStatus(status: string): JSX.Element {
  let variant = "";
  let displayStatus = status.charAt(0) + status.slice(1).toLowerCase();
  switch (status) {
    case "REQUESTED":
      variant = "secondary";
      break;
    case "IN_PROGRESS":
      variant = "secondary";
      displayStatus = "In Progress"; // Correctly format the display for "IN_PROGRESS"
      break;
    case "CANCELLED":
      variant = "destructive";
      break;
    case "COMPLETED":
      variant = ""; // Default or no specific variant
      break;
    default:
      return <Badge>Unknown Status</Badge>;
  }
  return <Badge variant={variant}>{displayStatus}</Badge>;
}

export default function Pentests() {
  const data = useLoaderData<typeof loader>();
  return (
    <Shell heading="Pentests">
      <div className="flex mb-2">
        <div className="flex">
          <span className="text-xs text-gray-400 mt-auto">
            Showing {data.pentests.length} available pentests
          </span>
        </div>
        <div className="ml-auto space-x-2">
          <Button size="sm" variant="outline" className="h-8 gap-1">
            <File className="h-3.5 w-3.5" />
            <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
              Export
            </span>
          </Button>
          <Sheet>
            <SheetTrigger>
              <Button size="sm" className="h-8 gap-1">
                <PlusCircle className="h-3.5 w-3.5" />
                <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                  New pentest
                </span>
              </Button>
            </SheetTrigger>
            <SheetContent>
              <SheetHeader>
                <SheetTitle className="text-2xl font-serif">
                  Request a new pentest
                </SheetTitle>
                <SheetDescription style={{ marginTop: "3px" }}>
                  Configure and request a test from our team.
                </SheetDescription>
              </SheetHeader>
              <Form method="post" className="mt-6 space-y-8">
                <input
                  type="hidden"
                  name="companyId"
                  value={data.company?.companyId}
                />
                <div className="grid w-full max-w-sm items-center gap-2">
                  <Label htmlFor="date">Date</Label>
                  <Input
                    type="text"
                    id="date"
                    name="date"
                    defaultValue={new Date().toISOString()}
                    placeholder="YYYY-MM-DDTHH:MM:SS.sssZ"
                  />
                </div>
                <div className="grid w-full max-w-sm items-center gap-4">
                  <Label htmlFor="type">Type</Label>
                  <RadioGroup
                    id="type"
                    name="type"
                    defaultValue="WEB_BLACKBOX"
                    className="space-y-2"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="WEB_BLACKBOX" id="WEB_BLACKBOX" />
                      <Label htmlFor="WEB_BLACKBOX">
                        <div className="flex">
                          <p>Web Application - Blackbox</p>
                          <p className="ml-auto text-gray-700 font-medium text-xs">
                            $1,000
                          </p>
                        </div>
                        <p className="mt-1 text-gray-500 font-normal text-xs">
                          Our team will perform a series of scans and tests from
                          an external perspective.
                        </p>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="WEB_GREYBOX" id="WEB_GREYBOX" />
                      <Label htmlFor="WEB_GREYBOX">
                        <div className="flex">
                          <p>Web Application - Greybox</p>
                          <p className="ml-auto text-gray-700 font-medium text-xs">
                            $5,000
                          </p>
                        </div>
                        <p className="mt-1 text-gray-500 font-normal text-xs">
                          Greybox includes authenticated scans and testing of
                          external-facing API logic.
                        </p>
                      </Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="WEB_WHITEBOX" id="WEB_WHITEBOX" />
                      <Label htmlFor="WEB_WHITEBOX">
                        <div className="flex">
                          <p>Web Application - Whitebox</p>
                          <p className="ml-auto text-gray-700 font-medium text-xs">
                            $10,000
                          </p>
                        </div>
                        <p className="mt-1 text-gray-500 font-normal text-xs">
                          Includes a deep-dive into every aspect of the
                          application. Typically requires access to
                          source code.
                        </p>
                      </Label>
                    </div>
                  </RadioGroup>
                </div>
                <div className="grid w-full max-w-sm items-center gap-3">
                  <Label htmlFor="scope">Scope</Label>
                  <RadioGroup id="scope" name="scope" defaultValue="option-one">
                    {data.scopes.map((scope) => (
                      <div
                        key={scope.id}
                        className="flex items-center space-x-2"
                      >
                        <RadioGroupItem value={scope.id} id={scope.id} />
                        <Label htmlFor={scope.id}>{scope.name}</Label>
                      </div>
                    ))}
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="new-scope" id="new-scope" />
                      <Label htmlFor="new-scope">Define a new scope</Label>
                    </div>
                  </RadioGroup>
                </div>
                <SheetFooter className="absolute bottom-0 right-0 flex justify-end p-4">
                  <SheetClose>
                    <Button size="sm" variant="outline" className="h-8">
                      Cancel
                    </Button>
                  </SheetClose>
                  <Button size="sm" className="h-8 gap-1" type="submit">
                    <Send className="h-3.5 w-3.5" />
                    <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                      Request
                    </span>
                  </Button>
                </SheetFooter>
              </Form>
            </SheetContent>
          </Sheet>
        </div>
      </div>

      <Card>
        <CardContent className="p-2">
          <Table>
            <TableHeader style={{ textAlign: "left" }}>
              <TableRow>
                <TableHead>Name</TableHead>
                <TableHead>Type</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Scope</TableHead>
                <TableHead>Date</TableHead>
                <TableHead></TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {data.pentests.map((pentest) => (
                <TableRow key={pentest.id}>
                  <TableCell className="font-medium">
                    {pentest.scope.name} -{" "}
                    {dayjs(pentest.date).format("MMMM YYYY")}
                  </TableCell>
                  <TableCell>{formatPentestType(pentest.type)}</TableCell>
                  <TableCell>{formatPentestStatus(pentest.status)}</TableCell>
                  <TableCell>{pentest.scope.name}</TableCell>
                  <TableCell>
                    {dayjs(pentest.date).format("YYYY-MM-DD")}
                  </TableCell>
                  <TableCell className="text-right">
                    <Link
                      to={`/pentests/${pentest.id}`}
                      className={
                        "h-8 gap-1 " +
                        buttonVariants({ variant: "outline", size: "sm" })
                      }
                    >
                      <ExternalLink className="h-3.5 w-3.5" />
                      <span className="sr-only sm:not-sr-only sm:whitespace-nowrap">
                        View report
                      </span>
                    </Link>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </Shell>
  );
}

export async function loader({ request }) {
  const user = await authenticator.isAuthenticated(request, {
    failureRedirect: "/auth/login",
  });

  const company = await prisma.membership.findFirst({
    where: {
      userId: user.id,
    },
  });

  const pentests = await prisma.pentest.findMany({
    where: {
      companyId: company?.companyId,
    },
    include: {
      scope: true,
    },
  });

  const scopes = await prisma.scope.findMany({
    where: {
      companyId: company?.companyId,
    },
    select: {
      id: true,
      name: true,
    },
  });

  return json({ company, user, pentests, scopes });
}
